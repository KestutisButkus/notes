Štai aiški ir praktiška 🧵 **Git komandų atmintinė**, skirta realiam darbui su projektais. Ji padės tau greitai prisiminti, ką naudoti ir kada.

---

## 🔧 Bazinės Git komandos

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git init` | Sukuria naują Git saugyklą | Pradedant naują projektą |
| `git clone <url>` | Nukopijuoja esamą saugyklą | Kai nori dirbti su jau egzistuojančiu projektu |
| `git status` | Parodo dabartinę būseną | Prieš commit'inant, kad matytum pakeitimus |
| `git add <failas>` | Pažymi failą commit'ui | Kai nori įtraukti pakeitimus |
| `git commit -m "žinutė"` | Išsaugo pakeitimus su aprašymu | Po `add`, kad išsaugotum versiją |
| `git log` | Rodo commit'ų istoriją | Norint peržiūrėti kas ir kada buvo pakeista |

---

## 🌐 Darbas su nuotoline saugykla

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git remote -v` | Parodo nuotolinių saugyklų adresus | Patikrinti, kur push'inama |
| `git push` | Išsiunčia pakeitimus į nuotolinę saugyklą | Po commit'o, kad kiti matytų |
| `git pull` | Atsisiunčia ir sujungia naujausius pakeitimus | Prieš pradedant darbą, kad turėtum naujausią versiją |
| `git fetch` | Atsisiunčia pakeitimus be sujungimo | Kai nori tik peržiūrėti, kas pasikeitė |

---

## 🌿 Darbas su šakomis (branch)

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git branch` | Parodo esamas šakas | Norint matyti struktūrą |
| `git branch <pavadinimas>` | Sukuria naują šaką | Pradedant naują funkciją |
| `git checkout <šaka>` | Persijungia į kitą šaką | Kai nori dirbti kitoje šakoje |
| `git merge <šaka>` | Sujungia šaką su dabartine | Baigus funkciją, sujungti su pagrindine |

---

## 🧹 Konfliktų ir valymo komandos

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git diff` | Parodo pakeitimus tarp versijų | Prieš commit'ą, kad suprastum kas keista |
| `git reset <failas>` | Pašalina failą iš staging | Jei netyčia pridėjai failą |
| `git stash` | Laikinai išsaugo pakeitimus | Kai reikia persijungti, bet nenori prarasti darbo |
| `git stash pop` | Grąžina pakeitimus iš stash | Kai grįžti prie darbo |

---

Jei nori, galiu paruošti PDF versiją arba interaktyvų testą, kad įtvirtintum žinias. Ar norėtum papildyti šią atmintinę su GitHub pull request'ų ar `.gitignore` pavyzdžiais?

# 🧠 Git komandų atmintinė

## 🔧 Bazinės komandos

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git init` | Sukuria naują Git saugyklą | Pradedant naują projektą |
| `git clone <url>` | Nukopijuoja esamą saugyklą | Kai nori dirbti su jau egzistuojančiu projektu |
| `git status` | Parodo dabartinę būseną | Prieš commit'inant, kad matytum pakeitimus |
| `git add <failas>` | Pažymi failą commit'ui | Kai nori įtraukti pakeitimus |
| `git commit -m "žinutė"` | Išsaugo pakeitimus su aprašymu | Po `add`, kad išsaugotum versiją |
| `git log` | Rodo commit'ų istoriją | Norint peržiūrėti kas ir kada buvo pakeista |

## 🌐 Darbas su nuotoline saugykla

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git remote -v` | Parodo nuotolinių saugyklų adresus | Patikrinti, kur push'inama |
| `git push` | Išsiunčia pakeitimus į nuotolinę saugyklą | Po commit'o, kad kiti matytų |
| `git pull` | Atsisiunčia ir sujungia naujausius pakeitimus | Prieš pradedant darbą |
| `git fetch` | Atsisiunčia pakeitimus be sujungimo | Kai nori tik peržiūrėti, kas pasikeitė |

## 🌿 Darbas su šakomis (branch)

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git branch` | Parodo esamas šakas | Norint matyti struktūrą |
| `git branch <pavadinimas>` | Sukuria naują šaką | Pradedant naują funkciją |
| `git checkout <šaka>` | Persijungia į kitą šaką | Kai nori dirbti kitoje šakoje |
| `git merge <šaka>` | Sujungia šaką su dabartine | Baigus funkciją, sujungti su pagrindine |

## 🧹 Konfliktų ir valymo komandos

| Komanda | Paskirtis | Kada naudoti |
|--------|-----------|--------------|
| `git diff` | Parodo pakeitimus tarp versijų | Prieš commit'ą, kad suprastum kas keista |
| `git reset <failas>` | Pašalina failą iš staging | Jei netyčia pridėjai failą |
| `git stash` | Laikinai išsaugo pakeitimus | Kai reikia persijungti, bet nenori prarasti darbo |
| `git stash pop` | Grąžina pakeitimus iš stash | Kai grįžti prie darbo |

## 📁 Papildoma

| Komanda | Paskirtis |
|--------|-----------|
| `.gitignore` | Failas, kuriame nurodoma, ką Git turi ignoruoti |
| `git config --global user.name "Vardas"` | Nustato naudotojo vardą |
| `git config --global user.email "el.paštas"` | Nustato naudotojo el. paštą |

