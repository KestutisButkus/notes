GIT KOMANDŲ ATMINTINĖ

🔧 Bazinės komandos
- git init — sukuria naują Git saugyklą
- git clone <url> — nukopijuoja esamą saugyklą
- git status — parodo dabartinę būseną
- git add <failas> — pažymi failą commit'ui
- git commit -m "žinutė" — išsaugo pakeitimus su aprašymu
- git log — rodo commit'ų istoriją

🌐 Darbas su nuotoline saugykla
- git remote -v — parodo nuotolinių saugyklų adresus
- git push — išsiunčia pakeitimus į nuotolinę saugyklą
- git pull — atsisiunčia ir sujungia naujausius pakeitimus
- git fetch — atsisiunčia pakeitimus be sujungimo

🌿 Darbas su šakomis
- git branch — parodo esamas šakas
- git branch <pavadinimas> — sukuria naują šaką
- git checkout <šaka> — persijungia į kitą šaką
- git merge <šaka> — sujungia šaką su dabartine

🧹 Konfliktų ir valymo komandos
- git diff — parodo pakeitimus tarp versijų
- git reset <failas> — pašalina failą iš staging
- git stash — laikinai išsaugo pakeitimus
- git stash pop — grąžina pakeitimus iš stash

📁 Papildoma
- .gitignore — failas, kuriame nurodoma, ką Git turi ignoruoti
- git config --global user.name "Vardas" — nustato naudotojo vardą
- git config --global user.email "el.paštas" — nustato naudotojo el. paštą



# Git komandų atmintinė

## Bazinės komandos

- `git init`  
  Sukuria naują Git saugyklą. Naudojama pradedant naują projektą.

- `git clone <url>`  
  Nukopijuoja esamą nuotolinę saugyklą į vietinį katalogą.

- `git status`  
  Parodo dabartinę saugyklos būseną: pakeisti, pridėti, neįtraukti failai.

- `git add <failas>`  
  Pažymi failą commit'ui. Naudojama prieš `git commit`.

- `git commit -m "žinutė"`  
  Išsaugo pakeitimus su aprašymu. Sukuria versijos tašką.

- `git log`  
  Rodo commit'ų istoriją. Naudinga stebėti pakeitimus.

## Darbas su nuotoline saugykla

- `git remote -v`  
  Parodo nuotolinių saugyklų adresus.

- `git push`  
  Išsiunčia vietinius pakeitimus į nuotolinę saugyklą.

- `git pull`  
  Atsisiunčia ir sujungia naujausius pakeitimus iš nuotolinės saugyklos.

- `git fetch`  
  Atsisiunčia pakeitimus be automatinio sujungimo. Naudojama peržiūrai.

## Darbas su šakomis

- `git branch`  
  Parodo esamas šakas.

- `git branch <pavadinimas>`  
  Sukuria naują šaką.

- `git checkout <šaka>`  
  Persijungia į kitą šaką.

- `git merge <šaka>`  
  Sujungia nurodytą šaką su dabartine.

## Konfliktų sprendimas ir valymas

- `git diff`  
  Parodo pakeitimus tarp versijų ar failų.

- `git reset <failas>`  
  Pašalina failą iš staging (ištraukiamas iš `git add`).

- `git stash`  
  Laikinai išsaugo necommit'intus pakeitimus.

- `git stash pop`  
  Grąžina pakeitimus iš laikinos saugyklos.

## Papildoma konfigūracija

- `.gitignore`  
  Failas, kuriame nurodoma, kokius failus Git turi ignoruoti.

- `git config --global user.name "Vardas"`  
  Nustato naudotojo vardą visose saugyklose.

- `git config --global user.email "el.paštas"`  
  Nustato naudotojo el. paštą visose saugyklose.
